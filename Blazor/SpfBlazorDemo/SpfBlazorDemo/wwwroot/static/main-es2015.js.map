{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {Component, OnInit} from '@angular/core';\nimport * as signalR from '@aspnet/signalr';\n\n@Component({\n  selector: 'spfa-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  private hubConnection = new signalR.HubConnectionBuilder()\n    .withUrl('../spfHub')\n    .build();\n\n  public messages: string[] = [];\n\n  constructor() {\n\n  }\n\n  public ngOnInit(): void {\n    this.hubConnection.start()\n        .then(() => console.log('Connected!'))\n        .catch(err => console.log('Error while starting connection: ' + err));\n\n    this.hubConnection.on('BroadcastAsync', (msg: string) => {\n      this.messages.push(msg);\n    });\n  }\n\n  public sendMessage(): void {\n    this.hubConnection.invoke('BroadcastAsync', 'Hallo von Angular :D')\n      .catch(err => console.log);\n  }\n}\n","<div fxFlex=\"100\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <mat-card fxFlex=\"90\">\n    <mat-card-header>\n      <mat-card-title>Angular App</mat-card-title>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\">\n      <div class=\"angular-div-container\" >\n        <button (click)=\"sendMessage()\" mat-button color=\"primary\">Greetings @Blazor</button>\n        <mat-list role=\"list\">\n          <mat-list-item role=\"listitem\" *ngFor=\"let message of messages\">{{ message }}</mat-list-item>\n        </mat-list>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatListModule} from '@angular/material/list';\nimport {MatCardModule} from '@angular/material/card';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    MatButtonModule,\n    MatListModule,\n    MatCardModule,\n    FlexLayoutModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}